using System.Linq;
using Content.Shared._CorvaxNext.IntegratedCircuits.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CorvaxNext.IntegratedCircuits.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class EventControl : Control
{
    private NetEntity _netEntity;
    private CircuitEvent _event;
    private ElectronicAssemblyMenu _menu;

    public EventControl(ElectronicAssemblyMenu menu, NetEntity entity, CircuitEvent even)
    {
        RobustXamlLoader.Load(this);
        _netEntity = entity;
        _event = even;
        _menu = menu;

        MainEvent.Text = $"<{GetAccessString(_event)}> {_event.Name}";
        MainEvent.OnButtonDown += _ => _menu.SelectEvent(_event);

        if (_event.EventType == EventType.PulseIn)
        {
            var allEvents = _menu.AllEvents;
            Button? button = null;
            for (var i = 0; i < allEvents.Count; i++)
            {
                var (netEntity, externEvent) = allEvents[i];
                var externReference = externEvent.EventLinks.FirstOrDefault(wl => wl.Circuit == this._netEntity && wl.EventName == this._event.Name);
                if (externReference != null)
                {
                    var circuit = _menu.EntManager.GetEntity(netEntity);
                    var comp = _menu.EntManager.GetComponent<IntegratedCircuitComponent>(circuit);
                    button = new Button()
                    {
                        Text = $"│ <Out> {externEvent.Name} ← {comp.Id}",
                        HorizontalAlignment = HAlignment.Left
                    };
                    button.OnButtonDown += _ =>
                    {
                        _menu.Bui.SendDisconnectEventMessage(netEntity, externReference.EventName, this._netEntity, this._event.Name);
                    };
                    Relationship.Children.Add(button);
                }
            }

            if (button != null)
                button.Text = button.Text!.Replace('│', '└');
        }
        else // PulseOut
        {
            for (var i = 0; i < _event.EventLinks.Count; i++)
            {
                var writable = _event.EventLinks[i];
                var circuit = _menu.EntManager.GetEntity(writable.Circuit);
                var comp = _menu.EntManager.GetComponent<IntegratedCircuitComponent>(circuit);
                var button = new Button()
                {
                    Text = $"{(i == (_event.EventLinks.Count - 1) ? '└' : '│')} <In> {writable.EventName} → {comp.Id}",
                    HorizontalAlignment = HAlignment.Left
                };
                button.OnButtonDown += _ =>
                {
                    _menu.Bui.SendDisconnectEventMessage(this._netEntity, this._event.Name, writable.Circuit, writable.EventName);
                };
                Relationship.Children.Add(button);
            }
        }
    }

    public static string GetAccessString(CircuitEvent even)
    {
        return even.EventType switch
        {
            EventType.PulseIn => "In",
            EventType.PulseOut => "Out",
            _ => throw new NotImplementedException("Demencia")
        };
    }
}

