using System.Linq;
using Content.Shared._CorvaxNext.IntegratedCircuits.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CorvaxNext.IntegratedCircuits.UI.Controls;

[GenerateTypedNameReferences]
public sealed partial class WireControl : Control
{
    private NetEntity _netEntity;
    private CircuitWire _wire;
    private ElectronicAssemblyMenu _menu;

    public WireControl(ElectronicAssemblyMenu menu, NetEntity entity, CircuitWire wire) : base()
    {
        RobustXamlLoader.Load(this);
        _netEntity = entity;
        _wire = wire;
        _menu = menu;

        MainWire.Text = $"<{GetAccessString(wire)} : {GetTypeString(wire)}> {wire.Name}";
        MainWire.OnButtonDown += _ => _menu.SelectWire(_wire);

        if (wire.WireAccess == WireAccess.In)
        {
            var allWires = _menu.AllWires;
            Button? button = null;
            for (var i = 0; i < allWires.Count; i++)
            {
                var (netEntity, externWire) = allWires[i];
                var externReference = externWire.WriteLinks.FirstOrDefault(wl => wl.Circuit == this._netEntity && wl.WireName == this._wire.Name);
                if (externReference != null)
                {
                    var circuit = _menu.EntManager.GetEntity(netEntity);
                    var comp = _menu.EntManager.GetComponent<IntegratedCircuitComponent>(circuit);
                    button = new Button()
                    {
                        Text = $"│ <Out> {externWire.Name} ← {comp.Id}"
                    };
                    button.OnButtonDown += _ =>
                    {
                        _menu.Bui.SendDisconnectWireMessage(netEntity, externReference.WireName, this._netEntity, this._wire.Name);
                    };
                    Relationship.Children.Add(button);
                }
            }

            if (button != null)
                button.Text = button.Text!.Replace('│', '└');
        }
        else // Out
        {
            for (var i = 0; i < wire.WriteLinks.Count; i++)
            {
                var writable = wire.WriteLinks[i];
                var circuit = _menu.EntManager.GetEntity(writable.Circuit);
                var comp = _menu.EntManager.GetComponent<IntegratedCircuitComponent>(circuit);
                var button = new Button()
                {
                    Text = $"{(i == (wire.WriteLinks.Count - 1) ? '└' : '│')} <In> {writable.WireName} → {comp.Id}"
                };
                button.OnButtonDown += _ =>
                {
                    _menu.Bui.SendDisconnectWireMessage(this._netEntity, this._wire.Name, writable.Circuit, writable.WireName);
                };
                Relationship.Children.Add(button);
            }
        }
    }

    private static string GetAccessString(CircuitWire wire)
    {
        return wire.WireAccess switch
        {
            WireAccess.In => "In",
            WireAccess.Out => "Out",
            _ => throw new NotImplementedException("Demencia")
        };
    }

    private static string GetTypeString(CircuitWire wire)
    {
        return wire.WireType switch
        {
            WireType.Any => "Any",
            WireType.Integer => "Int",
            WireType.Float => "Float",
            WireType.String => "String",
            WireType.Reference => "Ref",
            _ => throw new NotImplementedException("Demencia")
        };
    }
}

