using Content.Client._CorvaxNext.IntegratedCircuits.UI.Controls;
using Content.Client.UserInterface.Controls;
using Content.Shared._CorvaxNext.IntegratedCircuits.CircuitComponents;
using Content.Shared._CorvaxNext.IntegratedCircuits.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CorvaxNext.IntegratedCircuits.UI;

[GenerateTypedNameReferences]
public sealed partial class ElectronicAssemblyMenu : FancyWindow
{
    [Dependency] internal IEntityManager EntManager = null!;

    public ElectronicAssemblyBoundUserInterface Bui = null!;
    private EntityUid _owner;
    private ElectronicAssemblyComponent _assembly = null!;
    private Dictionary<string, EntityUid> _circuitNameToEntity = new(16);
    private Dictionary<string, IntegratedCircuitComponent> _circuitNameToCircuitComp = new(16);

    private string? _selectedCircuit = null;
    private CircuitWire? _connectWire = null;
    private CircuitEvent? _connectEvent = null;
    private string? _connectOwner = null;

    public List<(NetEntity, CircuitWire)> AllWires = new(16);
    public List<(NetEntity, CircuitEvent)> AllEvents = new(16);

    public ElectronicAssemblyMenu() : base()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    public void SetupWindow(EntityUid owner, ElectronicAssemblyBoundUserInterface bui)
    {
        _owner = owner;
        Bui = bui;
        _assembly = EntManager.GetComponent<ElectronicAssemblyComponent>(owner);
        CircuitList.OnItemSelected += OnCircuitSelected;
        RemoveCircuit.OnButtonDown += _ =>
        {
            if (_selectedCircuit != null)
                bui.SendRemoveCircuitMessage(EntManager.GetNetEntity(_circuitNameToEntity[_selectedCircuit!]));
        };
        BuildUI();
    }

    private void OnCircuitSelected(ItemList.ItemListSelectedEventArgs obj)
    {
        _selectedCircuit = obj.ItemList[obj.ItemIndex].Text;
        BuildCircuitUI();
    }

    public void BuildUI()
    {
        _selectedCircuit = null;
        _circuitNameToEntity.Clear();
        _circuitNameToCircuitComp.Clear();

        foreach (var circuitUid in _assembly.CircuitContainer.ContainedEntities)
        {
            var circuit = EntManager.GetComponent<IntegratedCircuitComponent>(circuitUid);
            _circuitNameToEntity.Add(circuit.Id, circuitUid);
            _circuitNameToCircuitComp.Add(circuit.Id, circuit);
        }

        CircuitList.Clear();
        CircuitList.AddItems(_circuitNameToEntity.Keys);

        Wires.Children.Clear();
        Events.Children.Clear();
        CircuitSettings.Children.Clear();

        UpdateDebugLabel();
    }

    public void BuildCircuitUI()
    {
        Wires.Children.Clear();
        Events.Children.Clear();
        CircuitSettings.Children.Clear();

        UpdateDictionaries();

        var selectedEntity = _circuitNameToEntity[_selectedCircuit!];
        var selectedNetEntity = EntManager.GetNetEntity(selectedEntity);
        var selectedCircuit = _circuitNameToCircuitComp[_selectedCircuit!];

        foreach (var selectedCircuitWire in selectedCircuit.Wires)
        {
            Wires.AddChild(new WireControl(this, selectedNetEntity, selectedCircuitWire));
        }

        foreach (var selectedCircuitEvent in selectedCircuit.Events)
        {
            Events.AddChild(new EventControl(this, selectedNetEntity, selectedCircuitEvent));
        }

        if (EntManager.TryGetComponent(selectedEntity, out StringMemoryCircuitComponent? stringMemoryCircuitComponent))
        {
            CircuitSettings.AddChild(new StringMemoryCircuitEditor(Bui, stringMemoryCircuitComponent.StringData, EntManager.GetNetEntity(selectedEntity)));
        }
        if (EntManager.TryGetComponent(selectedEntity, out IntegerMemoryCircuitComponent? integerMemoryCircuitComponent))
        {
            CircuitSettings.AddChild(new IntegerMemoryCircuitEditor(Bui, integerMemoryCircuitComponent.IntegerData.ToString(), EntManager.GetNetEntity(selectedEntity)));
        }
    }

    private void UpdateDictionaries()
    {
        AllEvents.Clear();
        AllWires.Clear();

        var allCircuitsByName = _circuitNameToEntity.Keys;
        foreach (var circuitName in allCircuitsByName)
        {
            var circuitNetEntity = EntManager.GetNetEntity(_circuitNameToEntity[circuitName]);
            var circuitComp = _circuitNameToCircuitComp[circuitName];

            foreach (var circuitEvent in circuitComp.Events)
            {
                AllEvents.Add((circuitNetEntity, circuitEvent));
            }

            foreach (var circuitWires in circuitComp.Wires)
            {
                AllWires.Add((circuitNetEntity, circuitWires));
            }
        }
    }

    private void UpdateDebugLabel()
    {
        if (_connectWire != null)
            DebugState.Text = $"Привязываем провод {_connectWire.Name} от {_connectOwner}";
        else if (_connectEvent != null)
            DebugState.Text = $"Привязываем провод {_connectEvent.Name} от {_connectOwner}";
        else
            DebugState.Text = $"Выберите провод или ивент для привязки!";
    }

    public void SelectEvent(CircuitEvent selectedEvent)
    {
        if (selectedEvent.EventType == EventType.PulseOut)
        {
            _connectWire = null;
            _connectEvent = selectedEvent;
            _connectOwner = _selectedCircuit;
            UpdateDebugLabel();
        }
        else if (_connectEvent != null) // && PulseIn
        {
            var targetCircuit = EntManager.GetNetEntity(_circuitNameToEntity[_selectedCircuit!]);
            var ownerCircuit = EntManager.GetNetEntity(_circuitNameToEntity[_connectOwner!]);
            //_connectEvent.EventLinks.Add(new(targetCircuit, selectedEvent.Name));
            Bui.SendConnectEventMessage(targetCircuit, selectedEvent.Name, ownerCircuit, _connectEvent.Name);
            BuildCircuitUI();
        }
    }

    public void SelectWire(CircuitWire selectedWire)
    {
        if (selectedWire.WireAccess == WireAccess.Out)
        {
            _connectWire = selectedWire;
            _connectEvent = null;
            _connectOwner = _selectedCircuit;
            UpdateDebugLabel();
        }
        else if (_connectWire != null && IsConnectable(_connectWire, selectedWire)) // && In
        {
            var targetCircuit = EntManager.GetNetEntity(_circuitNameToEntity[_selectedCircuit!]);
            var ownerCircuit = EntManager.GetNetEntity(_circuitNameToEntity[_connectOwner!]);
            //_connectWire.WriteLinks.Add(new(targetCircuit, selectedWire.Name));
            Bui.SendConnectWireMessage(targetCircuit, selectedWire.Name, ownerCircuit, _connectWire.Name);
            BuildCircuitUI();
        }
    }

    private static bool IsConnectable(CircuitWire from, CircuitWire to)
    {
        var fromType = from.WireType;
        return to.WireType switch
        {
            WireType.Any => true,
            WireType.Integer when fromType == WireType.Integer => true,
            WireType.Float when fromType == WireType.Float => true,
            WireType.String when fromType == WireType.String => true,
            WireType.Reference when fromType == WireType.Reference => true,
            _ => false,
        };
    }
}

