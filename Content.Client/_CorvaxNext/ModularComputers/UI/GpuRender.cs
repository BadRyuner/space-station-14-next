using System.Numerics;
using Content.Client.Resources;
using Content.Shared._CorvaxNext.ModularComputers.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._CorvaxNext.ModularComputers.UI;

[GenerateTypedNameReferences]
public sealed partial class GpuRender : Control
{
    [Dependency] private IEntityManager _entityManager = null!;
    [Dependency] private readonly IResourceCache _cache = default!;
    private readonly Font _font;

    public PciGpuComponent? GpuComponent;

    public GpuRender()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _font = _cache.GetFont("/Fonts/NotoSans/NotoSans-Regular.ttf", 12);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (GpuComponent != null)
        {
            foreach (var command in GpuComponent.Commands)
            {
                switch (command)
                {
                    case DrawLine drawLine:
                        handle.DrawLine(drawLine.From, drawLine.To, drawLine.Color);
                        break;
                    case DrawDottedLine drawLine:
                        handle.DrawDottedLine(drawLine.From, drawLine.To, drawLine.Color, drawLine.Offset, drawLine.DashSize, drawLine.GapSize);
                        break;
                    case DrawEntity drawEntity:
                        handle.DrawEntity(_entityManager.GetEntity(drawEntity.Entity), drawEntity.Position, drawEntity.Scale, null);
                        break;
                    case DrawCircle drawCircle:
                        handle.DrawCircle(drawCircle.Position, drawCircle.Radius, drawCircle.Color, drawCircle.Filled);
                        break;
                    case DrawRect drawRect:
                        handle.DrawRect(drawRect.Box, drawRect.Color, drawRect.Filled);
                        break;
                    case DrawString drawString:
                        handle.DrawString(_font, drawString.Position, drawString.Text.AsSpan(), drawString.Scale, drawString.Color);
                        break;
                }
            }
        }
    }
}

